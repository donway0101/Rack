using System;
using ACS.SPiiPlusNET;

namespace Rack
{
    public class EthercatIo
    {
        private const string InputVariableName = "InputModule";
        private const string OutputVariableName = "OutputModule";
        private const string GlobalDefine = "GLOBAL INT ";
        private readonly int BaseAddressOffset;
        private readonly Api Ch;
        private readonly int InputModuleAddrInc;
        private readonly int InputModuleNum;
        private readonly string NewLine = Environment.NewLine;
        private readonly int OutputModuleAddrInc;
        private readonly int OutputModuleNum;

        public EthercatIo(Api acsController, int baseAddressOffset,
            int inputModuleNum, int outputModuleNum, int inputModuleAddrInc = 4, int outputModuleAddrInc = 2)
        {
            Ch = acsController;
            BaseAddressOffset = baseAddressOffset;
            InputModuleNum = inputModuleNum;
            OutputModuleNum = outputModuleNum;
            InputModuleAddrInc = inputModuleAddrInc;
            OutputModuleAddrInc = outputModuleAddrInc;
        }

        public void Setup()
        {
            //DeclareVariable();
            DeclareVariableInDBuffer();
        }

        /// <summary>
        ///     Global variable should be define in D buffer.
        /// </summary>
        private void DeclareVariable()
        {
            //Warning : Deletes all persistent global variables.
            //Todo: comment out
            Ch.ClearVariables();

            for (var i = 0; i < InputModuleNum; i++)
                Ch.DeclareVariable(AcsplVariableType.ACSC_INT_TYPE, GetInputName(i));

            for (var i = 0; i < OutputModuleNum; i++)
                Ch.DeclareVariable(AcsplVariableType.ACSC_INT_TYPE, GetOutputName(i));
        }

        private void DeclareVariableInDBuffer()
        {
            var Warning = "! Warning, generated by Host for digital input and output, do NOT change." + NewLine;

            var inputDefine = string.Empty;
            for (var i = 0; i < InputModuleNum; i++) inputDefine += GlobalDefine + GetInputName(i) + NewLine;

            var outputDefine = string.Empty;
            for (var i = 0; i < OutputModuleNum; i++) outputDefine += GlobalDefine + GetOutputName(i) + NewLine;

            var program = Warning + inputDefine + outputDefine;
            var DBuffer = (ProgramBuffer) Convert.ToInt16(Ch.GetDBufferIndex());

            var originProgram = Ch.UploadBuffer(DBuffer);
            if (originProgram != null)
            {
                if (originProgram.Contains(InputVariableName + BaseAddressOffset) == false)
                {
                    Ch.AppendBuffer(DBuffer, program);

                    for (var i = 0; i < 9; i++) Ch.ClearBuffer((ProgramBuffer) i, 1, 2000);
                    Ch.CompileBuffer(DBuffer);
                }
            }
            else
            {
                Ch.AppendBuffer(DBuffer, program);

                for (var i = 0; i < 9; i++) Ch.ClearBuffer((ProgramBuffer) i, 1, 2000);
                Ch.CompileBuffer(DBuffer);
            }

            MapEtherCAT();
        }

        private void MapEtherCAT()
        {
            for (var i = 0; i < InputModuleNum; i++)
                Ch.MapEtherCATInput(MotionFlags.ACSC_NONE, GetInputModuleAddress(i), GetInputName(i));

            for (var i = 0; i < OutputModuleNum; i++)
                Ch.MapEtherCATOutput(MotionFlags.ACSC_NONE, GetOutputModuleAddress(i), GetOutputName(i));
        }

        /// <summary>
        /// </summary>
        /// <param name="moduleId">Zero based</param>
        /// <returns></returns>
        private string GetInputName(int moduleId)
        {
            return InputVariableName + (BaseAddressOffset + moduleId * InputModuleAddrInc);
        }

        private string GetOutputName(int moduleId)
        {
            return OutputVariableName + (BaseAddressOffset + moduleId * OutputModuleAddrInc);
        }

        private int GetInputModuleAddress(int moduleId)
        {
            return BaseAddressOffset + moduleId * InputModuleAddrInc;
        }

        private int GetOutputModuleAddress(int moduleId)
        {
            return BaseAddressOffset + moduleId * OutputModuleAddrInc;
        }

        public bool GetInput(int moduleId, int inputPinNum)
        {
            var variableName = GetInputName(moduleId);
            // ? negative number?
            var inputValue = Convert.ToInt32(Ch.ReadVariable(variableName));

            //Get a signed byte back, convert to a unsigned byte.
            inputValue = inputValue > 0 ? inputValue : inputValue + 256;

            return GetBit(inputValue, inputPinNum);
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <param name="bitPosition">0 based index</param>
        private bool GetBit(int value, int bitPosition)
        {
            return (value & (1 << bitPosition)) != 0;
        }

        private void SetBit(ref int value, int bitPosition)
        {
            value |= 1 << bitPosition;
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <param name="bitPosition">0 based index</param>
        public static void ResetBit(ref int value, int bitPosition)
        {
            value &= ~(1 << bitPosition);
        }

        public bool GetOutput(int moduleId, int outputPinNum)
        {
            var variableName = GetOutputName(moduleId);
            // ? negative number?
            var OutputValue = Convert.ToInt32(Ch.ReadVariable(variableName));

            return GetBit(OutputValue, outputPinNum);
        }

        public void SetOutput(int moduleId, int outputPinNum, bool value)
        {
            var variableName = GetOutputName(moduleId);
            var OutputValue = Convert.ToInt32(Ch.ReadVariable(variableName));

            if (value)
                SetBit(ref OutputValue, outputPinNum);
            else
                ResetBit(ref OutputValue, outputPinNum);

            Ch.WriteVariable(OutputValue, variableName, ProgramBuffer.ACSC_NONE);
        }

        public void SetOutput(Output output, bool value)
        {
            var outputValue = (int) output;
            var moduleId = outputValue / 10;
            var outputPinNum = outputValue % 10;
            SetOutput(moduleId, outputPinNum, value);
        }

        public bool GetInput(Input input)
        {
            var inputValue = (int) input;
            var moduleId = inputValue / 10;
            var inputPinNum = inputValue % 10;

            return GetInput(moduleId, inputPinNum);
        }

        public void SetOutput(int output, bool value)
        {
            var moduleId = output / 10;
            var outputPinNum = output % 10;
            SetOutput(moduleId, outputPinNum, value);
        }

        public bool GetInput(int input)
        {
            var moduleId = input / 10;
            var inputPinNum = input % 10;
            return GetInput(moduleId, inputPinNum);
        }
    }
}